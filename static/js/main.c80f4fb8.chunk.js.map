{"version":3,"sources":["serviceWorker.js","components/MeteoWidget/index.js","containers/MeteoWidget.js","components/NavToggler/index.js","containers/NavToggler.js","store/actions/meteo-actions.js","components/SearchBar/index.js","containers/SearchBar.js","components/NavBar/index.js","containers/NavBar.js","components/Logo/index.js","components/App/index.js","containers/App.js","store/reducers/meteo.js","store/reducers/index.js","middlewares/meteoMiddleware.js","store/index.js","index.js"],"names":["Boolean","window","location","hostname","match","MeteoWidget","city","temp","feelsLike","tempMax","tempMin","className","Math","round","connect","state","meteo","main","feels_like","temp_max","temp_min","NavToggler","handleTogglerMenu","size","onClick","dispatch","type","SearchBar","handleGetSearch","searchInput","handleGetSubmit","onSubmit","evt","preventDefault","placeholder","onChange","text","target","value","payload","NavBar","navCities","handleSelectedCity","map","to","Logo","App","handleGeolocation","navOpen","useEffect","navigator","geolocation","getCurrentPosition","position","lat","coords","latitude","lon","longitude","console","log","permissions","query","alert","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","toastClassName","initialState","error","combineReducers","action","name","meteoMiddleware","store","next","url","process","axios","method","then","res","data","catch","e","getState","toast","enhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","createStore","rootReducer","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.c80f4fb8.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\n// == IMPORT Styles\r\nimport './style.scss';\r\n\r\nconst MeteoWidget = ({ \r\n  city, temp, feelsLike, tempMax, tempMin,\r\n}) => {\r\n  \r\n  return (\r\n    <div className=\"widget\">\r\n\r\n      { city ? \r\n        <div>\r\n          <div className=\"city\">\r\n            {city}\r\n          </div>\r\n          <div className=\"info\">\r\n            <div className=\"info-temp\">\r\n              <p>Temp. : {Math.round(temp)}° [max: {Math.round(tempMax)} | min: {Math.round(tempMin)}]</p>\r\n              <p>Temp. ressentie : {Math.round(feelsLike)}°</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        : <p className=\"waiting\">Waiting for the geolocation</p>\r\n      }\r\n\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default MeteoWidget;","import { connect } from 'react-redux';\r\nimport MeteoWidget from '../components/MeteoWidget';\r\n\r\nconst mapToStateProps = (state) => ({\r\n  \r\n  city: state.meteo.city,\r\n  temp: state.meteo.main.temp,\r\n  feelsLike: state.meteo.main.feels_like,\r\n  tempMax: state.meteo.main.temp_max,\r\n  tempMin: state.meteo.main.temp_min,\r\n\r\n});\r\n\r\nconst mapDispatchToProps = null;\r\n\r\nexport default connect(mapToStateProps, mapDispatchToProps)(MeteoWidget);","import React from 'react';\r\n\r\n// == IMPORT from Router\r\nimport { Link } from 'react-router-dom';\r\n\r\n// == IMPORT Styles and Icons (react-icons)\r\nimport './style.scss';\r\nimport { HiMenu } from 'react-icons/hi';\r\n\r\nconst NavToggler = ({ handleTogglerMenu }) => {\r\n\r\n\r\n  return (\r\n    <div className=\"menu\">\r\n      <Link>\r\n        <HiMenu size={38}\r\n          onClick={() => {\r\n            handleTogglerMenu();\r\n          }}\r\n        />\r\n      </Link>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default NavToggler;","import { connect } from 'react-redux';\r\nimport NavToggler from '../components/NavToggler';\r\n\r\n// == IMPORT of action creators\r\nimport { togglerMenu } from '../store/actions/meteo-actions';\r\n\r\nconst mapStateToProps = null;\r\n\r\nconst mapDispatchToState = (dispatch) => ({\r\n  \r\n  handleTogglerMenu: () => {\r\n    dispatch(togglerMenu());\r\n  },\r\n\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToState)(NavToggler);","export const GET_SEARCH = 'GET_SEARCH';\r\n\r\nexport const GET_SUBMIT = 'GET_SUBMIT';\r\nexport const GET_SUBMIT_SUCCESS = 'GET_SUBMIT_SUCCESS';\r\nexport const GET_SUBMIT_ERROR = 'GET_SUBMIT_ERROR';\r\n\r\nexport const TOGGLER_MENU = 'TOGGLER_MENU';\r\n\r\nexport const GET_GEOLOCATION = 'GET_GEOLOCATION';\r\nexport const GET_GEOLOCATION_SUCCESS = 'GET_GEOLOCATION_SUCCESS';\r\nexport const GET_GEOLOCATION_ERROR = 'GET_GEOLOCATION_ERROR';\r\n\r\nexport const GET_SELECTED_CITY = 'GET_SELECTED_CITY';\r\nexport const GET_SELECTED_CITY_SUCCESS = 'GET_SELECTED_CITY_SUCCESS';\r\nexport const GET_SELECTED_CITY_ERROR = 'GET_SELECTED_CITY_ERROR';\r\n\r\n\r\nexport const getSearch = (payload) => ({\r\n  type: GET_SEARCH,\r\n  payload,\r\n});\r\n\r\nexport const getSubmit = () => ({\r\n  type: GET_SUBMIT,\r\n});\r\n\r\nexport const getSubmitSuccess = (payload) => ({\r\n  type: GET_SUBMIT_SUCCESS,\r\n  payload,\r\n});\r\n\r\nexport const getSubmitError = (payload) => ({\r\n  type: GET_SUBMIT_ERROR,\r\n  payload,\r\n});\r\n\r\n// GEOLOCATON\r\nexport const getGeolocation = (payload) => ({\r\n  type: GET_GEOLOCATION,\r\n  payload,\r\n});\r\n\r\nexport const getGeolocationSuccess = (payload) => ({\r\n  type: GET_GEOLOCATION_SUCCESS,\r\n  payload,\r\n});\r\n\r\nexport const getGeolocationError = (payload) => ({\r\n  type: GET_GEOLOCATION_ERROR,\r\n  payload,\r\n});\r\n\r\n// SELECTED CiTY\r\nexport const getSelectedCity = (payload) => ({\r\n  type: GET_SELECTED_CITY,\r\n  payload,\r\n});\r\n\r\nexport const getSelectedCitySuccess = (payload) => ({\r\n  type: GET_SELECTED_CITY_SUCCESS,\r\n  payload,\r\n});\r\n\r\nexport const getSelectedCityError = (payload) => ({\r\n  type: GET_SELECTED_CITY_ERROR,\r\n  payload\r\n});\r\n\r\n// TOGGLER MENU\r\nexport const togglerMenu = () => ({\r\n  type: TOGGLER_MENU,\r\n});\r\n","import React from 'react';\r\n\r\n// == IMPORT Styles\r\nimport './style.scss';\r\n\r\nconst SearchBar = ({ handleGetSearch, searchInput, handleGetSubmit }) => {\r\n  return (\r\n    <div className=\"input\">\r\n      <form\r\n        onSubmit={(evt) => {\r\n          evt.preventDefault();\r\n          handleGetSubmit();\r\n        }}\r\n      >\r\n        <input \r\n          type=\"text\"\r\n          placeholder=\"Nouvelle ville...\"\r\n          onChange={(evt) => {\r\n            const text = evt.target.value;\r\n            handleGetSearch(text);\r\n          }}\r\n          value={searchInput}\r\n          />\r\n      </form>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default SearchBar;","// == IMPORT of the connect() function\r\nimport { connect } from 'react-redux';\r\n\r\n// == IMPORT of the component\r\nimport SearchBar from '../components/SearchBar';\r\n\r\n// == IMPORT of the action creator\r\nimport { getSearch, getSubmit } from '../store/actions/meteo-actions';\r\n\r\nconst mapStateToProps = (state) => ({\r\n  searchInput: state.meteo.searchInput,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n\r\n  handleGetSearch: (text) => {\r\n    dispatch(getSearch(text));\r\n  },\r\n  handleGetSubmit: () => {\r\n    dispatch(getSubmit());\r\n  },\r\n\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchBar);","import React from 'react';\r\n\r\n// == IMPORT Router\r\nimport { Link } from 'react-router-dom';\r\n\r\n// == IMPORT Containers\r\nimport SearchBar from '../../containers/SearchBar';\r\n\r\n// == IMPORT Styles\r\nimport './style.scss';\r\n\r\nconst NavBar = ({ navCities, handleTogglerMenu, handleSelectedCity }) => {\r\n\r\n  return (\r\n    <div className=\"locations\">\r\n      <SearchBar />\r\n\r\n        {\r\n          navCities.map((city) => {\r\n            return (\r\n              <div className=\"location\">\r\n              <Link to={'/'}>\r\n                <button\r\n                  onClick={() => {\r\n                    handleTogglerMenu();\r\n                    handleSelectedCity({\r\n                      city: city.city,\r\n                      main: city.main,\r\n                    })\r\n                  }}\r\n                >\r\n                  {city.city}\r\n                </button>\r\n              </Link>\r\n              </div>\r\n            )\r\n          })\r\n        }\r\n\r\n    </div>\r\n\r\n    \r\n  )\r\n};\r\n\r\nexport default NavBar;","import { connect } from 'react-redux';\r\nimport NavBar from '../components/NavBar';\r\n\r\n// == IMPORT action creators\r\nimport { togglerMenu, getSelectedCity } from '../store/actions/meteo-actions';\r\n\r\nconst mapStateToProps = (state) => ({\r\n  navCities: state.meteo.navCities,\r\n});\r\n\r\nconst mapDispatchToState = (dispatch) => ({\r\n\r\n  handleTogglerMenu: () => {\r\n    dispatch(togglerMenu());\r\n  },\r\n\r\n  handleSelectedCity: (city) => {\r\n    dispatch(getSelectedCity(city));\r\n  },\r\n\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToState)(NavBar);","import React from 'react';\r\n\r\n// == IMPORT style\r\nimport './style.scss';\r\n\r\nconst Logo = () => {\r\n  return (\r\n    <div className=\"logo\">\r\n      Raincheck\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default Logo;","import React, { useEffect } from \"react\";\r\n\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\n// == IMPORT Styles\r\nimport \"./style.scss\";\r\n\r\n// == IMPORT Containers\r\nimport MeteoWidget from \"../../containers/MeteoWidget\";\r\nimport NavToggler from \"../../containers/NavToggler\";\r\nimport NavBar from \"../../containers/NavBar\";\r\n\r\n// == IMPORT Components\r\nimport Logo from \"../Logo\";\r\n\r\n// COMPONENT APP\r\nconst App = ({ handleGeolocation, navOpen }) => {\r\n  // Launchement of the first API request in order to upload data about geolocation or the saved location\r\n  useEffect(() => {\r\n    if (\"geolocation\" in navigator) {\r\n      navigator.geolocation.getCurrentPosition((position) => {\r\n        let lat = position.coords.latitude;\r\n        let lon = position.coords.longitude;\r\n        console.log(navigator.permissions.query);\r\n        handleGeolocation({ lat, lon });\r\n      });\r\n    } else {\r\n      alert(\r\n        \"Your browser doesn't support geolocalisation, in order to use the application, please select a city\"\r\n      );\r\n    }\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <ToastContainer\r\n        position=\"top-right\"\r\n        autoClose={3500}\r\n        hideProgressBar={false}\r\n        newestOnTop={false}\r\n        closeOnClick\r\n        rtl={false}\r\n        pauseOnFocusLoss\r\n        draggable\r\n        pauseOnHover\r\n        toastClassName=\"toast\"\r\n      />\r\n      <Logo />\r\n      {navOpen ? <NavBar /> : <MeteoWidget />}\r\n      <NavToggler />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { connect } from 'react-redux';\r\nimport App from '../components/App';\r\n\r\n// == IMPORT action creators\r\nimport { getGeolocation } from '../store/actions/meteo-actions';\r\n\r\nconst mapStateToProps = (state) => ({\r\n  navOpen: state.meteo.navOpen,\r\n});\r\n\r\nconst mapDispatchToState = (dispatch) => ({\r\n\r\n  handleGeolocation: ({lat, lon}) => {\r\n    dispatch(getGeolocation({lat, lon}));\r\n  },\r\n\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToState)(App);","import {\r\n  GET_SEARCH, GET_SUBMIT, GET_SUBMIT_SUCCESS, GET_SUBMIT_ERROR,\r\n  TOGGLER_MENU,\r\n  GET_SELECTED_CITY, GET_SELECTED_CITY_SUCCESS, GET_SELECTED_CITY_ERROR,\r\n  GET_GEOLOCATION, GET_GEOLOCATION_SUCCESS, GET_GEOLOCATION_ERROR,\r\n} from '../actions/meteo-actions';\r\n\r\n// == Initial state of SearchBar\r\nexport const initialState = {\r\n  searchInput: '',\r\n  navCities: [],\r\n  city: '',\r\n  main: {},\r\n  error: '',\r\n  navOpen: false,\r\n};\r\n\r\n// == REDUCER fonction\r\nexport default (state = initialState, action = {}) => {\r\n  switch (action.type) {\r\n    case GET_SEARCH:\r\n      return {\r\n        ...state,\r\n        searchInput: action.payload,\r\n      };\r\n    case GET_SUBMIT:\r\n      return {\r\n        ...state,\r\n      };\r\n    case GET_SUBMIT_SUCCESS:\r\n      return {\r\n        ...state,\r\n        navCities: [\r\n          ...state.navCities,\r\n          {\r\n            city: state.searchInput,\r\n            main: action.payload,\r\n          }\r\n        ],\r\n        searchInput: '',\r\n      };\r\n    case GET_SUBMIT_ERROR:\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n      };\r\n    case TOGGLER_MENU:\r\n      return {\r\n        ...state,\r\n        navOpen: !state.navOpen,\r\n      };\r\n    case GET_GEOLOCATION:\r\n      return {\r\n        ...state,\r\n      };\r\n    case GET_GEOLOCATION_SUCCESS:\r\n      return {\r\n        ...state,\r\n        city: action.payload.name,\r\n        main: action.payload.main,\r\n      }\r\n    case GET_GEOLOCATION_ERROR:\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n      }\r\n    case GET_SELECTED_CITY:\r\n      return {\r\n        ...state,\r\n        city: action.payload.city,\r\n      };\r\n    case GET_SELECTED_CITY_SUCCESS:\r\n      return {\r\n        ...state,\r\n        main: action.payload,\r\n      };\r\n    case GET_SELECTED_CITY_ERROR:\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};","import { combineReducers } from 'redux';\r\nimport meteo from './meteo';\r\n\r\nexport default combineReducers({\r\n  meteo,\r\n});\r\n","// == IMPORT axios\r\nimport axios from 'axios';\r\n\r\nimport { toast } from 'react-toastify';\r\n\r\n// == IMPORT types and action creators\r\nimport { \r\n  GET_SUBMIT, getSubmitSuccess, getSubmitError, \r\n  GET_SELECTED_CITY, getSelectedCitySuccess, getSelectedCityError,\r\n  GET_GEOLOCATION, getGeolocationSuccess, getGeolocationError,\r\n} from '../store/actions/meteo-actions';\r\n\r\n// == middleware\r\nconst meteoMiddleware = (store) => (next) => (action) => {\r\n  next(action);\r\n  switch (action.type) {\r\n\r\n    // MV launched by useEffect() to get data about of geolocalisation\r\n    case GET_GEOLOCATION: {\r\n\r\n      const { lat, lon } = action.payload;\r\n      const API_KEY = process.env.REACT_APP_API_KEY;\r\n      const url = `${process.env.REACT_APP_API_URL}/weather?lat=${lat}&lon=${lon}&appid=${API_KEY}&units=metric`;\r\n    \r\n      axios({\r\n        method: 'get',\r\n        url\r\n      })\r\n        .then((res) => {\r\n          store.dispatch(getGeolocationSuccess(res.data));\r\n        })\r\n        .catch((e) => {\r\n          store.dispatch(getGeolocationError('Geolocation failed'));\r\n        });\r\n      break;\r\n    }   \r\n\r\n    // MV that is called each ...\r\n    case GET_SUBMIT: {\r\n      const city = store.getState().meteo.searchInput;\r\n      const API_KEY = process.env.REACT_APP_API_KEY;\r\n      const url = `${process.env.REACT_APP_API_URL}/weather?q=${city}&appid=${API_KEY}&units=metric`;\r\n\r\n      axios({\r\n        method: 'get',\r\n        url\r\n      })\r\n        .then((res) => {\r\n          store.dispatch(getSubmitSuccess(res.data.main));\r\n        })\r\n        .catch((e) => {\r\n          store.dispatch(getSubmitError('Searched location has not been found'));\r\n          toast.error('Searched location has not been found');\r\n        });\r\n      break;\r\n    }\r\n\r\n    // MV\r\n    case GET_SELECTED_CITY: {\r\n      const { city } = action.payload;\r\n      const API_KEY = process.env.REACT_APP_API_KEY;\r\n      const url = `${process.env.REACT_APP_API_URL}/weather?q=${city}&appid=${API_KEY}&units=metric`;\r\n\r\n      axios({\r\n        method: 'get',\r\n        url\r\n      })\r\n        .then((res) => {\r\n          store.dispatch(getSelectedCitySuccess(res.data.main));\r\n        })\r\n        .catch((e) => {\r\n          store.dispatch(getSelectedCityError('Searched location has not been found'));\r\n        });\r\n      break;\r\n    }\r\n    default:\r\n  }\r\n};\r\n\r\nexport default meteoMiddleware;","// == IMPORT from REDUX\r\nimport { createStore, compose, applyMiddleware } from 'redux';\r\n\r\n// == IMPORT : local\r\nimport rootReducer from '../store/reducers';\r\nimport meteoMiddleware from '../middlewares/meteoMiddleware';\r\n\r\n// == Enhancers\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst enhancers = composeEnhancers(\r\n  applyMiddleware(\r\n    meteoMiddleware,\r\n  ),\r\n);\r\n\r\n// == STORE\r\nconst store = createStore(\r\n  rootReducer,\r\n  enhancers,\r\n);\r\n\r\n// == Export\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n// IMPORT React Router\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\n\r\n// == IMPORT of container APP\r\nimport App from './containers/App';\r\n\r\n// == IMPORT Main style\r\nimport './styles/index.scss';\r\n\r\n// == IMPORT store\r\nimport { Provider } from 'react-redux';\r\nimport store from './store';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <Router>\r\n        <App />\r\n      </Router>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}